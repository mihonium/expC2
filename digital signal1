/*task1*/
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 256

int main()
{
    /* open file */
    FILE *fp = fopen("ecg4000.txt","r");
    if(fp==NULL){
        printf("Can't open data file.\n");
        return 1;
    }
    
    /* read data */
    char buf[BUF_SIZE],buf2[BUF_SIZE]; /* 新たなbuf2でchar型の変数を配列で256個確保 */
    double*otime;
    double*signal;
    int i,N;
    fgets(buf2,BUF_SIZE-1,fp); /*buf2を1行ずつ読み込む*/
    N = atof(buf2); /* buf2の文字列型データをfloat型に変換して変数Nに代入する */
    otime = malloc(sizeof(double)*N);
    signal = malloc(sizeof(double)*N);
    for (i = 0; i < N; i ++) {
            fgets(buf, BUF_SIZE-1, fp);
            sscanf(buf, "%lf,%lf\n", &otime[i], &signal[i]);
    }
    
    /* calculate moving average */
    int j,M;
    M=1; /* 移動平均区間5 */
    double signalma[N],sum[N];
    sum[i]=0;
    for(i=M-1;i<N;i++){
        for(j=0;j<M;j++){
            sum[i]+=signal[i-j];
        }
        signalma[i]=sum[i]/M;
    }
    /* differeftiate */
    double ds[N],ot[6];/* 1階微分したものをds,6個のピーク時間の配列をot*/
    int k=0;
    /* 6個のR波のピーク時刻を求める */
    printf("Rwave peaktime\n");
    for(i=0;i<N;i++){
        if(signalma[i]>1600){
            ds[i]=(signalma[i]-signalma[i-1])/0.0016667; /* 離散信号に対する1階微分 */
            ds[i+1]=(signalma[i+1]-signalma[i])/0.0016667;
            if(ds[i]>=0&&ds[i+1]<=0){
                printf("%lfs\n",otime[i]);
                ot[k]=otime[i];
                k++;
            }
        }
    }
    double rpc[6];/* 5個のR波の間隔をrpc */
    double sumrpc=0,averpc=0,avehr; /* 5個のR波の間隔の和をsumrpc,平均をaverpc, 心拍数をavehr*/
    for(k=0;k<5;k++){
        rpc[k]=ot[k+1]-ot[k];
        sumrpc += rpc[k];
    }
    /* 5つのR波間隔の平均値と平均心拍数を求める */
    averpc=sumrpc/5;
    avehr=60/averpc;
    printf("average Rwave cycle is: %lfs/t\n",averpc);
    printf("average heart rate is: %lft/m\n",avehr);
    
    /* free */
    free(otime);
    free(signal);
    
    /* ending */
    fclose(fp);
        
}

/*task2*/
#include <stdio.h>
#include <stdlib.h>
#define BUF_SIZE 256
int main()
{
    /* open file */
    FILE *fpx = fopen("ecg400.txt","r");
    if(fpx==NULL){
        printf("Can't open data file.\n");
        return 1;
    }
    FILE *fpy = fopen("ecg4000.txt","r");
    if(fpy==NULL){
        printf("Can't open data file.\n");
        return 1;
    }
    /* read data */
    char buftx[BUF_SIZE],bufx[BUF_SIZE];
    char bufty[BUF_SIZE],bufy[BUF_SIZE];
    int Nx=400,Ny=4000;
    int i;
    double tx[Nx],x[Nx];
    double ty[Ny],y[Ny];
    fgets(bufx,BUF_SIZE-1,fpx); /* read fpx */
    for (i = 0; i < Nx; i++) {
            fgets(buftx, BUF_SIZE-1, fpx);
            sscanf(buftx, "%lf,%lf\n", &tx[i], &x[i]); /* fpxの信号をxに読み込む */
            
    }
    fgets(bufy,BUF_SIZE-1,fpy); /* read fpy */
    for (i = 0; i < Ny; i ++) {
            fgets(bufty, BUF_SIZE-1, fpy);
            sscanf(bufty, "%lf,%lf\n", &ty[i], &y[i]);/* fpyの信号をyに読み込む */
    }
    
       /* y[]の平均値mを求める */
       double sumy=0,m;
       for(i = 0; i < Ny; i++){
           sumy +=y[i];
       }
       m = sumy/Ny;
       /* x[]とy[]の全ての要素からmを引く */
       double xm[i],ym[i];
       for(i=0; i<Nx; i++){
           xm[i]=x[i]-m;
       }
       for(i=0; i<Ny; i++){
           ym[i]=y[i]-m;
       }
       /* 相関値rxyを求める */
       double rxy[3601];
       int j;
       for(i=0;i<3601;i++){
           rxy[i]=0;
           for(j=0;j<=Nx-1;j++){
               rxy[i] += xm[j]*ym[j+i];
               
           }
       }
       /* 相関値のピーク検出 */
       /* differeftiate */
       double ds[3601],rtxy[6];
       int k=0;
       for(i=0;i<3601;i++){
           if(rxy[i]>10000000){
               ds[i] = rxy[i]-rxy[i-1];
               ds[i+1] = rxy[i+1]-rxy[i];
               if(ds[i]>=0&&ds[i+1]<=0){
                   rtxy[k]=ty[i];
                   k++;
               }
           }
       }
       double rpc[5];/* 5個のR波の間隔をrpc */
       printf("Rwave cycle\n");
       double sumrpc=0,averpc=0,avehr; /* 5個のR波の間隔の和をsumrpc,平均をaverpc, 心拍数をavehr*/
       for(k=0;k<5;k++){
           rpc[k]=rtxy[k+1]-rtxy[k];
           sumrpc += rpc[k];
           printf("%lf\n",rpc[k]);
       }
       /* 5つのR波間隔の平均値と平均心拍数を求める */
       averpc=sumrpc/5;
       avehr=60/averpc;
       printf("average Rwave cycle is: %lfs/t\n",averpc);
           printf("average heart rate is: %lft/m\n",avehr);
                    
       /* ending */
       fclose(fpx);
       fclose(fpy);

}

