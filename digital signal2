/* task1 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
int main()
{
    int k,n;
    int i=0;
    int N=32;/* 信号の個数 */
    double dt=3.0/N;/* サンプリング間隔dt */
    double g[N],Gr,Gi,Ga[N];
    /*  離散フーリエ変換 */
    printf("実部Grと虚部Gi\n");
    for(k=-N/2;k<N/2;k++){
        Gr=Gi=0;/* 実部と虚部の初期値0 */
        for(n=0;n<N;n++){
            g[n]=sin(2*M_PI*dt*n)+0.5*cos(6*M_PI*dt*n);
            /* オイラーの公式より */
            Gr += g[n]*cos(2*M_PI*n*k/N);/* 余弦波成分を表す実部 */
            Gi += -g[n]*sin(2*M_PI*n*k/N);/* 正弦波成分を表す虚部 */
        }
        Ga[i]=sqrt(Gr*Gr+Gi*Gi);/* 実部の二乗と虚部の二乗の和の正の平方根 */
        i++;/* iを正に発散させる */
        printf("(Gr,Gi)=(%lf,%lf)\n",Gr,Gi);
    }
    printf("振幅スペクトル\n");
    for(i=0;i<N;i++){
        printf("%lf\n",Ga[i]);
    }
    return 0;
}

/* task2 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define BUF_SIZE 256

int main()
{
    /* open file */
    FILE *fp = fopen("ecg4000.txt","r");
    if(fp==NULL){
        printf("Can't open data file.\n");
        return 1;
    }
    /* read data */
    char buf[BUF_SIZE],buf2[BUF_SIZE]; /* 新たなbuf2でchar型の変数を配列で256個確保 */
    double*otime;
    double*signal;
    int i,N;
    fgets(buf2,BUF_SIZE-1,fp); /*buf2を1行ずつ読み込む*/
    N = atof(buf2); /* buf2の文字列型データをfloat型に変換して変数Nに代入する */
    otime = malloc(sizeof(double)*N);
    signal = malloc(sizeof(double)*N);
    for (i=0; i<N; i++) {
            fgets(buf, BUF_SIZE-1, fp);
            sscanf(buf, "%lf,%lf\n", &otime[i], &signal[i]);
    }
    /* 離散フーリエ変換 */
    int k;
    int j=0;
    double Gr,Gi,Ga[N];
    
    printf("実部Grと虚部Gi\n");
    for(k=-4000/2; k<4000/2; k++){
        Gr=Gi=0;/* 実部と虚部の初期値0 */
        for(i=0;i<4000;i++){
            /* オイラーの公式より */
            Gr += signal[i]*cos(2*M_PI*i*k/4000);/* 余弦波成分を表す実部 */
            Gi += -signal[i]*sin(2*M_PI*i*k/4000);/* 正弦波成分を表す虚部 */
        }
        Ga[j]=sqrt(Gr*Gr+Gi*Gi);/* 実部の二乗と虚部の二乗の和の正の平方根 */
        j++;/* jを正に発散させる */
        printf("(Gr,Gi)=(%lf,%lf)\n",Gr,Gi);
    }
    printf("振幅スペクトル\n");
    for(j=0; j<4000; j++){
        printf("%lf\n",Ga[j]);
    }
    /* 何番目が振幅スペクトルの最大値と2番目に大きい値となるかを求める */
    double max1,max2,jmax1=0,jmax2=0;
    max1=Ga[0];
    max2=Ga[0];
    for(j=0; j<4000; j++){
        if(Ga[j]>max1){
            max2=max1;
            max1=Ga[j];
            jmax2=jmax1;
            jmax1=j;
            
        }else if((max1>Ga[j])&&(Ga[j]>max2)){
            max2=Ga[j];
            jmax2=j;
            
        }
    }
    printf("振幅スペクトルの最大値と２番目に大きい値\n");
    printf("%lf:max1=%lf\n",jmax1,max1);
    printf("%lf:max2=%lf\n",jmax2,max2);
    /* f1,f2を求める */
    double df=(1.0/4000.0)*600.0;/* 離散フーリエ変換後の周波数スペクトルのメモリの間隔 */
    double f1,f2,hr;
    f1=df*((4000.0/2.0)-jmax1);
    f2=df*((4000.0/2.0)-jmax2);
    hr=f2*60.0;/* 秒を分にする */
    printf("f1:%lf[Hz]\n",f1);
    printf("f2:%lf[Hz]\n",f2);
    printf("heart rate:%lf[回/分]\n",hr);
    /* free */
    free(otime);
    free(signal);
    
    /* ending */
    fclose(fp);
      
}
/* task2avever. */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define BUF_SIZE 256

int main()
{
    /* open file */
    FILE *fp = fopen("ecg4000.txt","r");
    if(fp==NULL){
        printf("Can't open data file.\n");
        return 1;
    }
    /* read data */
    char buf[BUF_SIZE],buf2[BUF_SIZE]; /* 新たなbuf2でchar型の変数を配列で256個確保 */
    double*otime;
    double*signal;
    int i,N;
    fgets(buf2,BUF_SIZE-1,fp); /*buf2を1行ずつ読み込む*/
    N = atof(buf2); /* buf2の文字列型データをfloat型に変換して変数Nに代入する */
    otime = malloc(sizeof(double)*N);
    signal = malloc(sizeof(double)*N);
    for (i=0; i<N; i++) {
            fgets(buf, BUF_SIZE-1, fp);
            sscanf(buf, "%lf,%lf\n", &otime[i], &signal[i]);
    }
    /* 心電図信号から心電図信号の平均値を引く */
    double*signal_ave;
    signal_ave = malloc(sizeof(double)*N);
    double sum,ave;
    sum=0;
    for(i=0;i<N;i++){
        sum+=signal[i];
    }
    ave=sum/N;
    for(i=0;i<N;i++){
        signal_ave[i]=signal[i]-ave;
    }
    
    /* 離散フーリエ変換 */
    int k;
    int j=0;
    double Gr,Gi,Ga[N];
    
    printf("実部Grと虚部Gi\n");
    for(k=-4000/2; k<4000/2; k++){
        Gr=Gi=0;/* 実部と虚部の初期値0 */
        for(i=0;i<4000;i++){
            /* オイラーの公式より */
            Gr += signal_ave[i]*cos(2*M_PI*i*k/4000);/* 余弦波成分を表す実部 */
            Gi += -signal_ave[i]*sin(2*M_PI*i*k/4000);/* 正弦波成分を表す虚部 */
        }
        Ga[j]=sqrt(Gr*Gr+Gi*Gi);/* 実部の二乗と虚部の二乗の和の正の平方根 */
        j++;/* jを正に発散させる */
        printf("(Gr,Gi)=(%lf,%lf)\n",Gr,Gi);
    }
    printf("振幅スペクトル\n");
    for(j=0; j<4000; j++){
        printf("%lf\n",Ga[j]);
    }
    /* 何番目が振幅スペクトルの最大値と2番目に大きい値となるかを求める */
    double max1,max2,jmax1=0,jmax2=0;
    max1=Ga[0];
    max2=Ga[0];
    for(j=0; j<4000; j++){
        if(Ga[j]>max1){
            max2=max1;
            max1=Ga[j];
            jmax2=jmax1;
            jmax1=j;
            
        }else if(Ga[j]>max2){
            max2=Ga[j];
            jmax2=j;
        }
    }
    printf("振幅スペクトルの最大値と２番目に大きい値\n");
    printf("%lf:max1=%lf\n",jmax1,max1);
    printf("%lf:max2=%lf\n",jmax2,max2);
    
    /* f1,f2を求める */
    double df=(1.0/4000.0)*600.0;/* 離散フーリエ変換後の周波数スペクトルのメモリの間隔 */
    double f1,f2,hr;
    f1=df*((4000.0/2.0)-jmax1);
    f2=df*((4000.0/2.0)-jmax2);
    hr=f1*60.0;/* 秒を分にする */
    printf("f1:%lf[Hz]\n",f1);
    printf("f2:%lf[Hz]\n",f2);
    printf("heart rate:%lf[回/分]\n",hr);
    /* free */
    free(otime);
    free(signal);
    free(signal_ave);
    
    /* ending */
    fclose(fp);
      
}

